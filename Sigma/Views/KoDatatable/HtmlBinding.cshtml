@{
    ViewBag.Title = "With KnockOut Binding";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="page-content">
    <h2>With KnockOut Binding</h2>
    <div id="wrapper">
        <table id="example" class="table table-striped table-bordered dataTable">
            <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Age</th>
            </tr>
            </thead>
            <tbody data-bind="dataTablesForEach: {data: people, dataTableOptions: {
                          jQueryUI: true,
                          paging: true,
                          dom: 'frtip'
                      }
                  }">
            <tr>
                <td><span data-bind="text: id"></span></td>
                <td><span data-bind="text: first"></span></td>
                <td><span data-bind="text: age"></span></td>
            </tr>
            </tbody>
        </table>
    </div>
</div>

<script>
    ko.bindingHandlers.dataTablesForEach = {
        page: 0,
        init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var options = ko.unwrap(valueAccessor());
            ko.unwrap(options.data);
            if (options.dataTableOptions.paging) {
                valueAccessor().data.subscribe(function (changes) {
                    var table = $(element).closest('table').DataTable();
                    ko.bindingHandlers.dataTablesForEach.page = table.page();
                    table.destroy();
                }, null, 'arrayChange');
            }
            var nodes = Array.prototype.slice.call(element.childNodes, 0);
            ko.utils.arrayForEach(nodes, function (node) {
                if (node && node.nodeType !== 1) {
                    node.parentNode.removeChild(node);
                }
            });
            return ko.bindingHandlers.foreach.init(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext);
        },
        update: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
            var options = ko.unwrap(valueAccessor()),
                key = 'DataTablesForEach_Initialized';
            ko.unwrap(options.data);
            var table;
            if (!options.dataTableOptions.paging) {
                table = $(element).closest('table').DataTable();
                table.destroy();
            }
            ko.bindingHandlers.foreach.update(element, valueAccessor, allBindings, viewModel, bindingContext);
            table = $(element).closest('table').DataTable(options.dataTableOptions);
            if (options.dataTableOptions.paging) {
                if (table.page.info().pages - ko.bindingHandlers.dataTablesForEach.page == 0)
                    table.page(--ko.bindingHandlers.dataTablesForEach.page).draw(false);
                else
                    table.page(ko.bindingHandlers.dataTablesForEach.page).draw(false);
            }
            if (!ko.utils.domData.get(element, key) && (options.data || options.length))
                ko.utils.domData.set(element, key, true);
            return { controlsDescendantBindings: true };
        }
    };
    // Person ViewModel
    var Person = function (data, parent) {
        var self = this;
        self.id = data.id;
        self.first = ko.observable(data.first);
        self.last = ko.observable(data.last);
        self.age = ko.observable(data.age);
        self.full = ko.computed(function () {
            return self.first() + " " + self.last();
        }, self);
        // Subscribe a listener to the observable properties for the table
        // and invalidate the DataTables row when they change so it will redraw
    };
    //Main ViewModel
    var ViewModel = new function () {
        var self = this;
        this.people = ko.mapping.fromJS([]);
    };
    var count = 3;
    // Initial data set
    var data = [{
        id: 1,
        first: "Allan",
        last: "Jardine",
        age: 86
    }, {
        id: 2,
        first: "Bob",
        last: "Smith",
        age: 54
    }, {
        id: 3,
        first: "Jimmy",
        last: "Jones",
        age: 32
    }];
    //See how this works with large datasets
    for (var x = ++count; x <= 2000; x++) {
        data.push({
            id: x,
            first: 'NEW',
            last: 'NEW',
            age: 99
        });
    }
    $(document).ready(function () {
        // Convert the data set into observable objects, and will also add the
        // initial data to the table
        ko.mapping.fromJS(data, {
            key: function (data) {
                return ko.utils.unwrapObservable(data.id);
            },
            create: function (options) {
                return new Person(options.data, ViewModel);
            }
        }, ViewModel.people);
        ko.applyBindings(ViewModel);
    });
</script>